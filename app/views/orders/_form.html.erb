<div class="order-form-container">
  <%= form_with(model: @order, local: true, class: "order-form") do |f| %>
    <% if @order.errors.any? %>
      <div id="error_explanation" class="alert alert-danger">
        <h2><%= pluralize(@order.errors.count, "つのエラー") %> があります:</h2>
        <ul>
          <% @order.errors.full_messages.each do |message| %>
            <li><%= message %></li>
          <% end %>
        </ul>
      </div>
    <% end %>

    <div class="card mb-4">
      <div class="card-body">
        <h5 class="card-title">基本情報</h5>
        <div class="row">
          <div class="col-md-3 form-group">
            <%= f.label :customer_code, "顧客コード" %>
            <%= text_field_tag :customer_code, @customer_code, class: "form-control", id: "order_customer_code", placeholder: "顧客コードを入力" %>
          </div>

          <div class="col-md-3 form-group">
            <%= f.label :customer_id, "取引先" %>
            <div class="autocomplete-container" style="position: relative;">
              <%= f.hidden_field :customer_id %>
              <input type="text" 
                     class="form-control customer-search" 
                     id="customer_search_input"
                     placeholder="取引先名または顧客コードを入力"
                     value="<%= @order.customer&.company_name %>"
                     autocomplete="off">
              <div class="autocomplete-results customer-results" style="display: none; position: absolute; top: 100%; left: 0; right: 0; background: white; border: 1px solid #ccc; border-top: none; max-height: 200px; overflow-y: auto; z-index: 1000;"></div>
            </div>
          </div>

          <div class="col-md-3 form-group">
            <%= f.label :order_date, "受注日" %>
            <%= f.date_field :order_date, class: "form-control", required: true %>
          </div>

          <div class="col-md-3 form-group">
            <%= f.label :payment_method_id, "支払い方法" %>
            <%= f.collection_select :payment_method_id,
                @payment_methods,
                :id,
                :name,
                { include_blank: "支払い方法を選択してください" },
                { class: "form-control" } %>
          </div>
        </div>
      </div>
    </div>

    <div class="card mb-4">
      <div class="card-body">
        <h5 class="card-title">納品情報</h5>
        <div class="row">
          <div class="col-md-4 form-group">
            <%= f.label :delivery_location_id, "納品先" %>
            <%= f.collection_select :delivery_location_id,
                @delivery_locations || [],
                :id,
                :name,
                { include_blank: "納品先を選択してください" },
                { class: "form-control", required: true, disabled: @delivery_locations.blank?, id: "order_delivery_location_id" } %>
            <% if @delivery_locations.blank? %>
              <small class="form-text text-muted">先に取引先を選択してください</small>
            <% end %>
          </div>
          <div class="col-md-4 form-group">
            <%= f.label :expected_delivery_date, "希望納品日" %>
            <%= f.date_field :expected_delivery_date, class: "form-control" %>
            <small class="form-text text-muted">希望納品日または確定納品日のいずれかを入力してください</small>
          </div>
          <div class="col-md-4 form-group">
            <%= f.label :actual_delivery_date, "確定納品日" %>
            <%= f.date_field :actual_delivery_date, class: "form-control" %>
            <small class="form-text text-muted">希望納品日または確定納品日のいずれかを入力してください</small>
          </div>
        </div>
      </div>
    </div>

    <div class="card mb-4">
      <div class="card-body">
        <h5 class="card-title">注文明細</h5>
        <table class="table" id="order-items" style="table-layout: fixed;">
          <colgroup>
            <col style="width: 70px;">
            <col style="width: 160px;">
            <col style="width: 60px;">
            <col style="width: 100px;">
            <col style="width: 70px;">
            <col style="width: 80px;">
            <col style="width: 70px;">
            <col style="width: 100px;">
            <col style="width: 100px;">
            <col style="width: 80px;">
            <col style="width: 50px;">
          </colgroup>
          <thead>
            <tr>
              <th style="width: 70px;">商品コード</th>
              <th style="width: 160px;">商品</th>
              <th style="width: 70px;">規格</th>
              <th style="width: 100px;">単価</th>
              <th style="width: 70px;">税率</th>
              <th style="width: 80px;">数量</th>
              <th style="width: 70px;">単位</th>
              <th style="width: 100px;">税抜金額</th>
              <th style="width: 100px;">税込金額</th>
              <th style="width: 180px;">備考</th>
              <th style="width: 50px;"></th>
            </tr>
          </thead>
          <tbody>
            <%= f.fields_for :order_items do |item_form| %>
              <%= render 'order_item_fields', f: item_form %>
            <% end %>
            <% if f.object.order_items.empty? %>
              <% new_item = OrderItem.new(quantity: nil) %>
              <%= f.fields_for :order_items, new_item, child_index: Time.now.to_i do |item_form| %>
                <%= render 'order_item_fields', f: item_form %>
              <% end %>
            <% end %>
          </tbody>
          <tfoot>
            <tr>
              <td colspan="7" class="text-right"><strong>合計（税抜）：</strong></td>
              <td>
                <strong><span id="order-total-without-tax" style="display: inline-block; min-width: 65px; text-align: right;">0</span>円</strong>
              </td>
              <td colspan="2"></td>
            </tr>
            <tr>
              <td colspan="7" class="text-right"><strong>合計（税込）：</strong></td>
              <td></td>
              <td>
                <strong><span id="order-total-with-tax" style="display: inline-block; min-width: 65px; text-align: right;">0</span>円</strong>
              </td>
              <td></td>
            </tr>
          </tfoot>
        </table>

        <div class="links mb-3">
          <%= link_to '商品を追加', '#', class: 'btn btn-outline-primary add-item' %>
        </div>
      </div>
    </div>

    <div class="actions">
      <%= f.submit @order.persisted? ? "更新" : "登録", class: "btn btn-success" %>
    </div>
  <% end %>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
  // 共通変数の宣言
  const customerCodeField = document.getElementById('order_customer_code');
  const customerSearchField = document.getElementById('customer_search_input');
  const customerIdField = document.getElementById('order_customer_id');
  
  // 編集時の初期化処理
  if (customerIdField && customerIdField.value) {
    // 既に顧客が選択されている場合、納品先の選択肢を更新
    const deliverySelect = document.getElementById('order_delivery_location_id');
    if (deliverySelect && deliverySelect.options.length <= 1) {
      // 納品先の選択肢が空の場合、顧客情報を取得して更新
      const customerCode = customerCodeField ? customerCodeField.value : '';
      if (customerCode) {
        fetch(`/orders/find_customer_by_code?code=${encodeURIComponent(customerCode)}`)
          .then(response => response.json())
          .then(data => {
            if (data.success && data.customer) {
              deliverySelect.innerHTML = '<option value="">納品先を選択してください</option>';
              data.customer.delivery_locations.forEach(location => {
                const option = document.createElement('option');
                option.value = location.id;
                option.textContent = location.name;
                deliverySelect.appendChild(option);
              });
              deliverySelect.disabled = false;
            }
          })
          .catch(error => {
            console.error('Customer info fetch error:', error);
          });
      }
    }
  } else if (customerCodeField && customerCodeField.value) {
    // 顧客コードが入力されているが、顧客IDが設定されていない場合（エラー時など）
    const deliverySelect = document.getElementById('order_delivery_location_id');
    if (deliverySelect && deliverySelect.options.length <= 1) {
      const customerCode = customerCodeField.value.trim();
      if (customerCode) {
        fetch(`/orders/find_customer_by_code?code=${encodeURIComponent(customerCode)}`)
          .then(response => response.json())
          .then(data => {
            if (data.success && data.customer) {
              // 顧客名を設定
              if (customerSearchField) {
                customerSearchField.value = data.customer.company_name;
              }
              if (customerIdField) {
                customerIdField.value = data.customer.id;
              }
              
              // 納品先の選択肢を更新
              deliverySelect.innerHTML = '<option value="">納品先を選択してください</option>';
              data.customer.delivery_locations.forEach(location => {
                const option = document.createElement('option');
                option.value = location.id;
                option.textContent = location.name;
                deliverySelect.appendChild(option);
              });
              deliverySelect.disabled = false;
            }
          })
          .catch(error => {
            console.error('Customer info fetch error:', error);
          });
      }
    }
  }

  // 顧客コード入力時の自動補完
  if (customerCodeField) {
    customerCodeField.addEventListener('blur', function() {
      const code = this.value.trim();
      console.log('Customer code entered:', code); // デバッグ用
      if (code) {
        fetch(`/orders/find_customer_by_code?code=${encodeURIComponent(code)}`)
          .then(response => {
            console.log('Customer code response status:', response.status); // デバッグ用
            return response.json();
          })
          .then(data => {
            console.log('Customer code data:', data); // デバッグ用
            if (data.success && data.customer) {
              // 顧客名を設定
              if (customerSearchField) {
                customerSearchField.value = data.customer.company_name;
              }
              if (customerIdField) {
                customerIdField.value = data.customer.id;
              }
              
              // 納品先の選択肢を更新
              const deliverySelect = document.getElementById('order_delivery_location_id');
              if (deliverySelect) {
                deliverySelect.innerHTML = '<option value="">納品先を選択してください</option>';
                data.customer.delivery_locations.forEach(location => {
                  const option = document.createElement('option');
                  option.value = location.id;
                  option.textContent = location.name;
                  deliverySelect.appendChild(option);
                });
                deliverySelect.disabled = false;
              }
              
              showMessage('顧客情報を取得しました', 'success');
            } else {
              showMessage('顧客コードが見つかりません', 'error');
            }
          })
          .catch(error => {
            console.error('Customer code error:', error);
            showMessage('顧客情報の取得に失敗しました', 'error');
          });
      }
    });
  }

  // インクリメンタルサーチ機能は一時的に無効化
  /*
  // 顧客名入力時の自動補完
  if (customerSearchField) {
    customerSearchField.addEventListener('input', function() {
      // 一時的に無効化
    });
  }
  */

  // 商品コード入力時の自動補完（委譲）
  document.addEventListener('focusout', function(event) {
    const productCodeField = event.target;
    if (!productCodeField.classList || !productCodeField.classList.contains('product-code-input')) {
      return;
    }

    const code = productCodeField.value.trim();
    const row = productCodeField.closest('tr');
    console.log('Product code entered:', code); // デバッグ用

    if (!code || !row) {
      return;
    }

    fetch(`/orders/find_product_by_code?code=${encodeURIComponent(code)}`)
      .then(response => {
        console.log('Product code response status:', response.status); // デバッグ用
        return response.json();
      })
      .then(data => {
        console.log('Product code data:', data); // デバッグ用
        if (data.success && data.product) {
          const productSearchField = row.querySelector('.product-search');
          const productIdField = row.querySelector('input[name*="[product_id]"]');
          const productNameOverrideField = row.querySelector('input[name*="[product_name_override]"]');

          if (productSearchField) {
            productSearchField.value = data.product.name;
          }
          if (productIdField) {
            productIdField.value = data.product.id;
          }
          if (productNameOverrideField) {
            productNameOverrideField.value = '';
          }

          const unitPriceDisplay = row.querySelector('.unit-price-display');
          const unitPriceInput = row.querySelector('.unit-price-input');
          const taxRateDisplay = row.querySelector('.tax-rate-display');
          const taxRateInput = row.querySelector('input[name*="[tax_rate]"]');

          if (unitPriceDisplay && data.product.price) {
            unitPriceDisplay.value = data.product.price;
          }
          if (unitPriceInput && data.product.price) {
            unitPriceInput.value = data.product.price;
          }
          if (taxRateDisplay && data.product.tax_rate) {
            taxRateDisplay.textContent = data.product.tax_rate;
          }
          if (taxRateInput && data.product.tax_rate) {
            taxRateInput.value = data.product.tax_rate;
          }

          const quantityInput = row.querySelector('.quantity-input');
          if (quantityInput) {
            quantityInput.dispatchEvent(new Event('change'));
          }

          showMessage('商品情報を取得しました', 'success');
        } else {
          showMessage('商品コードが見つかりません', 'error');
        }
      })
      .catch(error => {
        console.error('Product code error:', error);
        showMessage('商品情報の取得に失敗しました', 'error');
      });
  });

  // 商品名フィールドの変更を監視して手動変更を保存（委譲）
  document.addEventListener('input', function(event) {
    const productSearchField = event.target;
    if (!productSearchField.classList || !productSearchField.classList.contains('product-search')) {
      return;
    }

    const row = productSearchField.closest('tr');
    if (!row) {
      return;
    }

    const productNameOverrideField = row.querySelector('input[name*="[product_name_override]"]');
    if (productNameOverrideField) {
      productNameOverrideField.value = productSearchField.value;
      console.log('Product name manually changed to:', productSearchField.value); // デバッグ用
    }
  });

  // メッセージ表示関数
  function showMessage(message, type) {
    // 既存のメッセージを削除
    const existingMessage = document.querySelector('.auto-complete-message');
    if (existingMessage) {
      existingMessage.remove();
    }

    // 新しいメッセージを作成
    const messageDiv = document.createElement('div');
    messageDiv.className = `alert auto-complete-message ${type === 'success' ? 'alert-success' : 'alert-danger'}`;
    messageDiv.textContent = message;
    messageDiv.style.position = 'fixed';
    messageDiv.style.top = '20px';
    messageDiv.style.right = '20px';
    messageDiv.style.zIndex = '9999';
    messageDiv.style.minWidth = '300px';

    document.body.appendChild(messageDiv);

    // 3秒後に自動削除
    setTimeout(() => {
      if (messageDiv.parentNode) {
        messageDiv.parentNode.removeChild(messageDiv);
      }
    }, 3000);
  }
});
</script>